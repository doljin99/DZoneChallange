/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hotmail.doljin99.challenge;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Win7
 */
public class Challenge extends javax.swing.JFrame {

    /**
     * Creates new form Challenge
     */
    public Challenge() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldElementName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldSymbol = new javax.swing.JTextField();
        jButtonChaeckChallange = new javax.swing.JButton();
        jCheckBoxAvailable = new javax.swing.JCheckBox();
        jButtonGenerate = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableGenerated = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Splurth's periodic table of the elements");

        jLabel1.setText("Element name");

        jLabel2.setText("Symbol");

        jButtonChaeckChallange.setText("check");
        jButtonChaeckChallange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChaeckChallangeActionPerformed(evt);
            }
        });

        jCheckBoxAvailable.setText("suitable");
        jCheckBoxAvailable.setEnabled(false);

        jButtonGenerate.setText("Generate");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jTableGenerated.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sequence", "Symbol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableGenerated);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jButtonChaeckChallange))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxAvailable)
                            .addComponent(jTextFieldElementName, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButtonGenerate)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldElementName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonChaeckChallange)
                    .addComponent(jCheckBoxAvailable))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonGenerate)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonChaeckChallangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChaeckChallangeActionPerformed
        String name = jTextFieldElementName.getText().trim();
        String symbol = jTextFieldSymbol.getText().trim();
        jCheckBoxAvailable.setSelected(validateSymbol(name, symbol));
    }//GEN-LAST:event_jButtonChaeckChallangeActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        ArrayList<String> codes = generateSymbols(jTextFieldElementName.getText().trim());
        DefaultTableModel model = (DefaultTableModel) jTableGenerated.getModel();
        model.setRowCount(0);
        Object[] row = new Object[2];
        for (int i = 0; i < codes.size(); i++) {
            String get = codes.get(i);
            row[0] = i + 1;
            row[1] = codes.get(i);

            model.addRow(row);
        }
        jTableGenerated.validate();
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    /**
     * check a symbol according to the rules
     * 
     * @param name  element name
     * @param symbol    symbol of element name
     * @return available
     */
    private boolean validateSymbol(String name, String symbol) {
        if (name == null || name.isEmpty() || name.length() < 2) {
            return false;
        }
        if (symbol == null || symbol.length() != 2) {
            return false;
        }
        char[] nameChars = name.toLowerCase().toCharArray();
        for (int i = 0; i < nameChars.length; i++) {
            char nameChar = nameChars[i];
            if (!Character.isAlphabetic(nameChar)) {
                return false;
            }
        }
        char[] symbolChars = symbol.toLowerCase().toCharArray();
        for (int i = 0; i < symbolChars.length; i++) {
            char symbolChar = symbolChars[i];
            if (!contains(nameChars, symbolChar)) {
                return false;
            }
        }
        int min = minPosition(nameChars, symbolChars[0]);
        int max = maxPosition(nameChars, symbolChars[1]);

        return min < max;
    }

    /**
     * check a char contained in array
     * 
     * @param array
     * @param ch
     * @return 
     */
    private boolean contains(char[] array, char ch) {
        if (array == null) {
            return false;
        }

        for (int i = 0; i < array.length; i++) {
            char c = array[i];
            if (c == ch) {
                return true;
            }
        }

        return false;
    }

    /**
     * get minimum index of a character in array
     * 
     * @param array container to be searched
     * @param ch search character
     * @return minimum index
     */
    private int minPosition(char[] array, char ch) {
        ArrayList<Integer> positions = getPositions(array, ch);
        if (positions.size() <= 0) {
            return Integer.MAX_VALUE;
        }
        return positions.get(0);
    }

    /**
     * get maximum index of a character in array
     * 
     * @param array container to be searched
     * @param ch search character
     * @return maximum index
     */
    private int maxPosition(char[] array, char ch) {
        ArrayList<Integer> positions = getPositions(array, ch);
        if (positions.size() <= 0) {
            return Integer.MIN_VALUE;
        }
        return positions.get(positions.size() - 1);
    }

    private ArrayList<Integer> getPositions(char[] array, char ch) {
        ArrayList<Integer> positions = new ArrayList<>();
        if (array == null) {
            return null;
        }
        for (int i = 0; i < array.length; i++) {
            char c = array[i];
            if (c == ch) {
                positions.add(i);
            }
        }
        return positions;
    }

    /**
     * generate recommended symbols for given element name
     * 
     * @param name given element name
     * @return recommended symbols by alphabetic sort, do not duplicated
     */
    private ArrayList<String> generateSymbols(String name) {
        HashSet<String> codes = new HashSet<>();
        char[] chras = name.toLowerCase().toCharArray();

        char[] temp0 = new char[1];
        char[] temp1 = new char[1];
        for (int i = 0; i < chras.length; i++) {
            temp0[0] = chras[i];
            for (int j = i + 1; j < chras.length; j++) {
                temp1[0] = chras[j];
                codes.add(new String(temp0).toUpperCase() + new String(temp1));
            }
        }
        ArrayList<String> sorted = new ArrayList<>(codes);
        Collections.sort(sorted);

        return sorted;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Challenge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Challenge().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonChaeckChallange;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JCheckBox jCheckBoxAvailable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableGenerated;
    private javax.swing.JTextField jTextFieldElementName;
    private javax.swing.JTextField jTextFieldSymbol;
    // End of variables declaration//GEN-END:variables
}
